/*
 * This file is generated by jOOQ.
*/
package com.rbkmoney.payouter.domain.tables;


import com.rbkmoney.payouter.domain.Keys;
import com.rbkmoney.payouter.domain.Sht;
import com.rbkmoney.payouter.domain.enums.PayoutSummaryOperationType;
import com.rbkmoney.payouter.domain.tables.records.PayoutSummaryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PayoutSummary extends TableImpl<PayoutSummaryRecord> {

    private static final long serialVersionUID = 908087483;

    /**
     * The reference instance of <code>sht.payout_summary</code>
     */
    public static final PayoutSummary PAYOUT_SUMMARY = new PayoutSummary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PayoutSummaryRecord> getRecordType() {
        return PayoutSummaryRecord.class;
    }

    /**
     * The column <code>sht.payout_summary.id</code>.
     */
    public final TableField<PayoutSummaryRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('sht.cash_flow_description_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>sht.payout_summary.payout_id</code>.
     */
    public final TableField<PayoutSummaryRecord, String> PAYOUT_ID = createField("payout_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>sht.payout_summary.cash_flow_type</code>.
     */
    public final TableField<PayoutSummaryRecord, PayoutSummaryOperationType> CASH_FLOW_TYPE = createField("cash_flow_type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.payouter.domain.enums.PayoutSummaryOperationType.class), this, "");

    /**
     * The column <code>sht.payout_summary.count</code>.
     */
    public final TableField<PayoutSummaryRecord, Integer> COUNT = createField("count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sht.payout_summary.amount</code>.
     */
    public final TableField<PayoutSummaryRecord, Long> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sht.payout_summary.fee</code>.
     */
    public final TableField<PayoutSummaryRecord, Long> FEE = createField("fee", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sht.payout_summary.currency_code</code>.
     */
    public final TableField<PayoutSummaryRecord, String> CURRENCY_CODE = createField("currency_code", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>sht.payout_summary.from_time</code>.
     */
    public final TableField<PayoutSummaryRecord, LocalDateTime> FROM_TIME = createField("from_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>sht.payout_summary.to_time</code>.
     */
    public final TableField<PayoutSummaryRecord, LocalDateTime> TO_TIME = createField("to_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>sht.payout_summary</code> table reference
     */
    public PayoutSummary() {
        this("payout_summary", null);
    }

    /**
     * Create an aliased <code>sht.payout_summary</code> table reference
     */
    public PayoutSummary(String alias) {
        this(alias, PAYOUT_SUMMARY);
    }

    private PayoutSummary(String alias, Table<PayoutSummaryRecord> aliased) {
        this(alias, aliased, null);
    }

    private PayoutSummary(String alias, Table<PayoutSummaryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sht.SHT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PayoutSummaryRecord, Long> getIdentity() {
        return Keys.IDENTITY_PAYOUT_SUMMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PayoutSummaryRecord> getPrimaryKey() {
        return Keys.CASH_FLOW_DESCRIPTION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PayoutSummaryRecord>> getKeys() {
        return Arrays.<UniqueKey<PayoutSummaryRecord>>asList(Keys.CASH_FLOW_DESCRIPTION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PayoutSummary as(String alias) {
        return new PayoutSummary(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PayoutSummary rename(String name) {
        return new PayoutSummary(name, null);
    }
}
