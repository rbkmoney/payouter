/*
 * This file is generated by jOOQ.
*/
package com.rbkmoney.payouter.domain.tables;


import com.rbkmoney.payouter.domain.Keys;
import com.rbkmoney.payouter.domain.Sht;
import com.rbkmoney.payouter.domain.enums.AccountType;
import com.rbkmoney.payouter.domain.tables.records.CashFlowPostingRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CashFlowPosting extends TableImpl<CashFlowPostingRecord> {

    private static final long serialVersionUID = -2021440621;

    /**
     * The reference instance of <code>sht.cash_flow_posting</code>
     */
    public static final CashFlowPosting CASH_FLOW_POSTING = new CashFlowPosting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CashFlowPostingRecord> getRecordType() {
        return CashFlowPostingRecord.class;
    }

    /**
     * The column <code>sht.cash_flow_posting.id</code>.
     */
    public final TableField<CashFlowPostingRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('sht.cash_flow_posting_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>sht.cash_flow_posting.payout_id</code>.
     */
    public final TableField<CashFlowPostingRecord, String> PAYOUT_ID = createField("payout_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>sht.cash_flow_posting.plan_id</code>.
     */
    public final TableField<CashFlowPostingRecord, String> PLAN_ID = createField("plan_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>sht.cash_flow_posting.batch_id</code>.
     */
    public final TableField<CashFlowPostingRecord, Long> BATCH_ID = createField("batch_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sht.cash_flow_posting.from_account_id</code>.
     */
    public final TableField<CashFlowPostingRecord, Long> FROM_ACCOUNT_ID = createField("from_account_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sht.cash_flow_posting.from_account_type</code>.
     */
    public final TableField<CashFlowPostingRecord, AccountType> FROM_ACCOUNT_TYPE = createField("from_account_type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.payouter.domain.enums.AccountType.class), this, "");

    /**
     * The column <code>sht.cash_flow_posting.to_account_id</code>.
     */
    public final TableField<CashFlowPostingRecord, Long> TO_ACCOUNT_ID = createField("to_account_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sht.cash_flow_posting.to_account_type</code>.
     */
    public final TableField<CashFlowPostingRecord, AccountType> TO_ACCOUNT_TYPE = createField("to_account_type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.payouter.domain.enums.AccountType.class), this, "");

    /**
     * The column <code>sht.cash_flow_posting.amount</code>.
     */
    public final TableField<CashFlowPostingRecord, Long> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sht.cash_flow_posting.currency_code</code>.
     */
    public final TableField<CashFlowPostingRecord, String> CURRENCY_CODE = createField("currency_code", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>sht.cash_flow_posting.description</code>.
     */
    public final TableField<CashFlowPostingRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>sht.cash_flow_posting.created_at</code>.
     */
    public final TableField<CashFlowPostingRecord, LocalDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>sht.cash_flow_posting</code> table reference
     */
    public CashFlowPosting() {
        this("cash_flow_posting", null);
    }

    /**
     * Create an aliased <code>sht.cash_flow_posting</code> table reference
     */
    public CashFlowPosting(String alias) {
        this(alias, CASH_FLOW_POSTING);
    }

    private CashFlowPosting(String alias, Table<CashFlowPostingRecord> aliased) {
        this(alias, aliased, null);
    }

    private CashFlowPosting(String alias, Table<CashFlowPostingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sht.SHT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CashFlowPostingRecord, Long> getIdentity() {
        return Keys.IDENTITY_CASH_FLOW_POSTING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CashFlowPostingRecord> getPrimaryKey() {
        return Keys.POSTING_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CashFlowPostingRecord>> getKeys() {
        return Arrays.<UniqueKey<CashFlowPostingRecord>>asList(Keys.POSTING_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CashFlowPosting as(String alias) {
        return new CashFlowPosting(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CashFlowPosting rename(String name) {
        return new CashFlowPosting(name, null);
    }
}
