/*
 * This file is generated by jOOQ.
*/
package com.rbkmoney.payouter.domain.tables;


import com.rbkmoney.payouter.domain.Keys;
import com.rbkmoney.payouter.domain.Sht;
import com.rbkmoney.payouter.domain.enums.AdjustmentStatus;
import com.rbkmoney.payouter.domain.tables.records.AdjustmentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Adjustment extends TableImpl<AdjustmentRecord> {

    private static final long serialVersionUID = 1390369651;

    /**
     * The reference instance of <code>sht.adjustment</code>
     */
    public static final Adjustment ADJUSTMENT = new Adjustment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdjustmentRecord> getRecordType() {
        return AdjustmentRecord.class;
    }

    /**
     * The column <code>sht.adjustment.id</code>.
     */
    public final TableField<AdjustmentRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('sht.adjustment_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>sht.adjustment.event_id</code>.
     */
    public final TableField<AdjustmentRecord, Long> EVENT_ID = createField("event_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sht.adjustment.shop_id</code>.
     */
    public final TableField<AdjustmentRecord, String> SHOP_ID = createField("shop_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>sht.adjustment.party_id</code>.
     */
    public final TableField<AdjustmentRecord, String> PARTY_ID = createField("party_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>sht.adjustment.invoice_id</code>.
     */
    public final TableField<AdjustmentRecord, String> INVOICE_ID = createField("invoice_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>sht.adjustment.payment_id</code>.
     */
    public final TableField<AdjustmentRecord, String> PAYMENT_ID = createField("payment_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>sht.adjustment.adjustment_id</code>.
     */
    public final TableField<AdjustmentRecord, String> ADJUSTMENT_ID = createField("adjustment_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>sht.adjustment.status</code>.
     */
    public final TableField<AdjustmentRecord, AdjustmentStatus> STATUS = createField("status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.payouter.domain.enums.AdjustmentStatus.class), this, "");

    /**
     * The column <code>sht.adjustment.created_at</code>.
     */
    public final TableField<AdjustmentRecord, LocalDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>sht.adjustment.domain_revision</code>.
     */
    public final TableField<AdjustmentRecord, Long> DOMAIN_REVISION = createField("domain_revision", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sht.adjustment.reason</code>.
     */
    public final TableField<AdjustmentRecord, String> REASON = createField("reason", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>sht.adjustment.new_amount</code>.
     */
    public final TableField<AdjustmentRecord, Long> NEW_AMOUNT = createField("new_amount", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sht.adjustment.new_provider_fee</code>.
     */
    public final TableField<AdjustmentRecord, Long> NEW_PROVIDER_FEE = createField("new_provider_fee", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sht.adjustment.new_fee</code>.
     */
    public final TableField<AdjustmentRecord, Long> NEW_FEE = createField("new_fee", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sht.adjustment.new_external_fee</code>.
     */
    public final TableField<AdjustmentRecord, Long> NEW_EXTERNAL_FEE = createField("new_external_fee", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sht.adjustment.captured_at</code>.
     */
    public final TableField<AdjustmentRecord, LocalDateTime> CAPTURED_AT = createField("captured_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>sht.adjustment.payout_id</code>.
     */
    public final TableField<AdjustmentRecord, Long> PAYOUT_ID = createField("payout_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>sht.adjustment</code> table reference
     */
    public Adjustment() {
        this("adjustment", null);
    }

    /**
     * Create an aliased <code>sht.adjustment</code> table reference
     */
    public Adjustment(String alias) {
        this(alias, ADJUSTMENT);
    }

    private Adjustment(String alias, Table<AdjustmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Adjustment(String alias, Table<AdjustmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sht.SHT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AdjustmentRecord, Long> getIdentity() {
        return Keys.IDENTITY_ADJUSTMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AdjustmentRecord> getPrimaryKey() {
        return Keys.ADJUSTMENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AdjustmentRecord>> getKeys() {
        return Arrays.<UniqueKey<AdjustmentRecord>>asList(Keys.ADJUSTMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Adjustment as(String alias) {
        return new Adjustment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Adjustment rename(String name) {
        return new Adjustment(name, null);
    }
}
